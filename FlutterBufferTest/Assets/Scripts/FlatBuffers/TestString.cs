// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestString : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestString GetRootAsTestString(ByteBuffer _bb) { return GetRootAsTestString(_bb, new TestString()); }
  public static TestString GetRootAsTestString(ByteBuffer _bb, TestString obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestString __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Str { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStrBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStrArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<FlatBuffers.TestString> CreateTestString(FlatBufferBuilder builder,
      StringOffset strOffset = default(StringOffset)) {
    builder.StartTable(1);
    TestString.AddStr(builder, strOffset);
    return TestString.EndTestString(builder);
  }

  public static void StartTestString(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddStr(FlatBufferBuilder builder, StringOffset strOffset) { builder.AddOffset(0, strOffset.Value, 0); }
  public static Offset<FlatBuffers.TestString> EndTestString(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffers.TestString>(o);
  }
  public TestStringT UnPack() {
    var _o = new TestStringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TestStringT _o) {
    _o.Str = this.Str;
  }
  public static Offset<FlatBuffers.TestString> Pack(FlatBufferBuilder builder, TestStringT _o) {
    if (_o == null) return default(Offset<FlatBuffers.TestString>);
    var _str = _o.Str == null ? default(StringOffset) : builder.CreateString(_o.Str);
    return CreateTestString(
      builder,
      _str);
  }
}

public class TestStringT
{
  public string Str { get; set; }

  public TestStringT() {
    this.Str = null;
  }
}


}
