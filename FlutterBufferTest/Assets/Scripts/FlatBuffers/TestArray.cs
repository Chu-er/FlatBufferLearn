// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestArray GetRootAsTestArray(ByteBuffer _bb) { return GetRootAsTestArray(_bb, new TestArray()); }
  public static TestArray GetRootAsTestArray(ByteBuffer _bb, TestArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Array(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArrayBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetArrayBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetArrayArray() { return __p.__vector_as_array<int>(4); }
  public bool MutateArray(int j, int array) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(__p.__vector(o) + j * 4, array); return true; } else { return false; } }

  public static Offset<FlatBuffers.TestArray> CreateTestArray(FlatBufferBuilder builder,
      VectorOffset arrayOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TestArray.AddArray(builder, arrayOffset);
    return TestArray.EndTestArray(builder);
  }

  public static void StartTestArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddArray(FlatBufferBuilder builder, VectorOffset arrayOffset) { builder.AddOffset(0, arrayOffset.Value, 0); }
  public static VectorOffset CreateArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffers.TestArray> EndTestArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffers.TestArray>(o);
  }
  public TestArrayT UnPack() {
    var _o = new TestArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TestArrayT _o) {
    _o.Array = new List<int>();
    for (var _j = 0; _j < this.ArrayLength; ++_j) {_o.Array.Add(this.Array(_j));}
  }
  public static Offset<FlatBuffers.TestArray> Pack(FlatBufferBuilder builder, TestArrayT _o) {
    if (_o == null) return default(Offset<FlatBuffers.TestArray>);
    var _array = default(VectorOffset);
    if (_o.Array != null) {
      var __array = _o.Array.ToArray();
      _array = CreateArrayVector(builder, __array);
    }
    return CreateTestArray(
      builder,
      _array);
  }
}

public class TestArrayT
{
  public List<int> Array { get; set; }

  public TestArrayT() {
    this.Array = null;
  }
}


}
