// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

public enum num : byte
{
  NONE = 0,
  bigNum = 1,
  smallNum = 2,
};

public class numUnion {
  public num Type { get; set; }
  public object Value { get; set; }

  public numUnion() {
    this.Type = num.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public FlatBuffers.num64T AsbigNum() { return this.As<FlatBuffers.num64T>(); }
  public static numUnion FrombigNum(FlatBuffers.num64T _bignum) { return new numUnion{ Type = num.bigNum, Value = _bignum }; }
  public FlatBuffers.num32T AssmallNum() { return this.As<FlatBuffers.num32T>(); }
  public static numUnion FromsmallNum(FlatBuffers.num32T _smallnum) { return new numUnion{ Type = num.smallNum, Value = _smallnum }; }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, numUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case num.bigNum: return FlatBuffers.num64.Pack(builder, _o.AsbigNum()).Value;
      case num.smallNum: return FlatBuffers.num32.Pack(builder, _o.AssmallNum()).Value;
    }
  }
}


}
