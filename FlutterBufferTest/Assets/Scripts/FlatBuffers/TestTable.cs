// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestTable GetRootAsTestTable(ByteBuffer _bb) { return GetRootAsTestTable(_bb, new TestTable()); }
  public static TestTable GetRootAsTestTable(ByteBuffer _bb, TestTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatBuffers.TestEnum Index { get { int o = __p.__offset(4); return o != 0 ? (FlatBuffers.TestEnum)__p.bb.GetSbyte(o + __p.bb_pos) : FlatBuffers.TestEnum.None; } }
  public bool MutateIndex(FlatBuffers.TestEnum index) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)index); return true; } else { return false; } }
  public bool TestBool { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateTestBool(bool testBool) { int o = __p.__offset(6); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(testBool ? 1 : 0)); return true; } else { return false; } }
  public int TestInt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateTestInt(int testInt) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, testInt); return true; } else { return false; } }
  public string TestString { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestStringBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTestStringBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTestStringArray() { return __p.__vector_as_array<byte>(10); }
  public FlatBuffers.Vec3? Position { get { int o = __p.__offset(12); return o != 0 ? (FlatBuffers.Vec3?)(new FlatBuffers.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FlatBuffers.Vec4? Quaternion { get { int o = __p.__offset(14); return o != 0 ? (FlatBuffers.Vec4?)(new FlatBuffers.Vec4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FlatBuffers.TestArray? Array { get { int o = __p.__offset(16); return o != 0 ? (FlatBuffers.TestArray?)(new FlatBuffers.TestArray()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Ratio { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutateRatio(float ratio) { int o = __p.__offset(18); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, ratio); return true; } else { return false; } }

  public static Offset<FlatBuffers.TestTable> CreateTestTable(FlatBufferBuilder builder,
      FlatBuffers.TestEnum index = FlatBuffers.TestEnum.None,
      bool testBool = false,
      int testInt = 0,
      StringOffset testStringOffset = default(StringOffset),
      FlatBuffers.Vec3T position = null,
      FlatBuffers.Vec4T quaternion = null,
      Offset<FlatBuffers.TestArray> arrayOffset = default(Offset<FlatBuffers.TestArray>),
      float ratio = 0.0f) {
    builder.StartTable(8);
    TestTable.AddRatio(builder, ratio);
    TestTable.AddArray(builder, arrayOffset);
    TestTable.AddQuaternion(builder, FlatBuffers.Vec4.Pack(builder, quaternion));
    TestTable.AddPosition(builder, FlatBuffers.Vec3.Pack(builder, position));
    TestTable.AddTestString(builder, testStringOffset);
    TestTable.AddTestInt(builder, testInt);
    TestTable.AddTestBool(builder, testBool);
    TestTable.AddIndex(builder, index);
    return TestTable.EndTestTable(builder);
  }

  public static void StartTestTable(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddIndex(FlatBufferBuilder builder, FlatBuffers.TestEnum index) { builder.AddSbyte(0, (sbyte)index, 0); }
  public static void AddTestBool(FlatBufferBuilder builder, bool testBool) { builder.AddBool(1, testBool, false); }
  public static void AddTestInt(FlatBufferBuilder builder, int testInt) { builder.AddInt(2, testInt, 0); }
  public static void AddTestString(FlatBufferBuilder builder, StringOffset testStringOffset) { builder.AddOffset(3, testStringOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FlatBuffers.Vec3> positionOffset) { builder.AddStruct(4, positionOffset.Value, 0); }
  public static void AddQuaternion(FlatBufferBuilder builder, Offset<FlatBuffers.Vec4> quaternionOffset) { builder.AddStruct(5, quaternionOffset.Value, 0); }
  public static void AddArray(FlatBufferBuilder builder, Offset<FlatBuffers.TestArray> arrayOffset) { builder.AddOffset(6, arrayOffset.Value, 0); }
  public static void AddRatio(FlatBufferBuilder builder, float ratio) { builder.AddFloat(7, ratio, 0.0f); }
  public static Offset<FlatBuffers.TestTable> EndTestTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffers.TestTable>(o);
  }
  public static void FinishTestTableBuffer(FlatBufferBuilder builder, Offset<FlatBuffers.TestTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTestTableBuffer(FlatBufferBuilder builder, Offset<FlatBuffers.TestTable> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TestTableT UnPack() {
    var _o = new TestTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TestTableT _o) {
    _o.Index = this.Index;
    _o.TestBool = this.TestBool;
    _o.TestInt = this.TestInt;
    _o.TestString = this.TestString;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Quaternion = this.Quaternion.HasValue ? this.Quaternion.Value.UnPack() : null;
    _o.Array = this.Array.HasValue ? this.Array.Value.UnPack() : null;
    _o.Ratio = this.Ratio;
  }
  public static Offset<FlatBuffers.TestTable> Pack(FlatBufferBuilder builder, TestTableT _o) {
    if (_o == null) return default(Offset<FlatBuffers.TestTable>);
    var _testString = _o.TestString == null ? default(StringOffset) : builder.CreateString(_o.TestString);
    var _array = _o.Array == null ? default(Offset<FlatBuffers.TestArray>) : FlatBuffers.TestArray.Pack(builder, _o.Array);
    return CreateTestTable(
      builder,
      _o.Index,
      _o.TestBool,
      _o.TestInt,
      _testString,
      _o.Position,
      _o.Quaternion,
      _array,
      _o.Ratio);
  }
}

public class TestTableT
{
  public FlatBuffers.TestEnum Index { get; set; }
  public bool TestBool { get; set; }
  public int TestInt { get; set; }
  public string TestString { get; set; }
  public FlatBuffers.Vec3T Position { get; set; }
  public FlatBuffers.Vec4T Quaternion { get; set; }
  public FlatBuffers.TestArrayT Array { get; set; }
  public float Ratio { get; set; }

  public TestTableT() {
    this.Index = FlatBuffers.TestEnum.None;
    this.TestBool = false;
    this.TestInt = 0;
    this.TestString = null;
    this.Position = new FlatBuffers.Vec3T();
    this.Quaternion = new FlatBuffers.Vec4T();
    this.Array = null;
    this.Ratio = 0.0f;
  }
  public static TestTableT DeserializeFromBinary(byte[] fbBuffer) {
    return TestTable.GetRootAsTestTable(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TestTable.FinishTestTableBuffer(fbb, TestTable.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
