// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestBool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestBool GetRootAsTestBool(ByteBuffer _bb) { return GetRootAsTestBool(_bb, new TestBool()); }
  public static TestBool GetRootAsTestBool(ByteBuffer _bb, TestBool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestBool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Scalar { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateScalar(bool scalar) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(scalar ? 1 : 0)); return true; } else { return false; } }

  public static Offset<FlatBuffers.TestBool> CreateTestBool(FlatBufferBuilder builder,
      bool scalar = false) {
    builder.StartTable(1);
    TestBool.AddScalar(builder, scalar);
    return TestBool.EndTestBool(builder);
  }

  public static void StartTestBool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddScalar(FlatBufferBuilder builder, bool scalar) { builder.AddBool(0, scalar, false); }
  public static Offset<FlatBuffers.TestBool> EndTestBool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffers.TestBool>(o);
  }
  public TestBoolT UnPack() {
    var _o = new TestBoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TestBoolT _o) {
    _o.Scalar = this.Scalar;
  }
  public static Offset<FlatBuffers.TestBool> Pack(FlatBufferBuilder builder, TestBoolT _o) {
    if (_o == null) return default(Offset<FlatBuffers.TestBool>);
    return CreateTestBool(
      builder,
      _o.Scalar);
  }
}

public class TestBoolT
{
  public bool Scalar { get; set; }

  public TestBoolT() {
    this.Scalar = false;
  }
}


}
