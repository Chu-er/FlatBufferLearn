// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct num64 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static num64 GetRootAsnum64(ByteBuffer _bb) { return GetRootAsnum64(_bb, new num64()); }
  public static num64 GetRootAsnum64(ByteBuffer _bb, num64 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public num64 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long TestLong { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateTestLong(long testLong) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, testLong); return true; } else { return false; } }

  public static Offset<FlatBuffers.num64> Createnum64(FlatBufferBuilder builder,
      long testLong = 0) {
    builder.StartTable(1);
    num64.AddTestLong(builder, testLong);
    return num64.Endnum64(builder);
  }

  public static void Startnum64(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTestLong(FlatBufferBuilder builder, long testLong) { builder.AddLong(0, testLong, 0); }
  public static Offset<FlatBuffers.num64> Endnum64(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffers.num64>(o);
  }
  public num64T UnPack() {
    var _o = new num64T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(num64T _o) {
    _o.TestLong = this.TestLong;
  }
  public static Offset<FlatBuffers.num64> Pack(FlatBufferBuilder builder, num64T _o) {
    if (_o == null) return default(Offset<FlatBuffers.num64>);
    return Createnum64(
      builder,
      _o.TestLong);
  }
}

public class num64T
{
  public long TestLong { get; set; }

  public num64T() {
    this.TestLong = 0;
  }
}


}
